# -*- coding: utf-8 -*-
"""Amazon_Reviews.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yPsvNWuTe4GuiJQuvYXZE8U1y64EnXdP
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from nltk.corpus import stopwords
import re
import nltk
import string

df = pd.read_csv('amazon_reviews.csv')

df.head(20)

df = df[['overall', 'reviewText']]

df.head(5)

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

df.shape

df['overall'].value_counts()

df.rename(columns={'overall': 'rating', 'reviewText':'review'}, inplace=True)

df

df['review'] = df['review'].fillna('')
df['review'] = df['review'].astype(str)

lemm = nltk.WordNetLemmatizer()

def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    text = nltk.word_tokenize(text)  # Tokenize the text
    stop_words = set(stopwords.words('english'))  # Get stopwords
    text = [word for word in text if word not in stop_words]  # Remove stopwords
    text = [lemm.lemmatize(word) for word in text]  # Lemmatize
    text = re.sub(r'\d+', '', ' '.join(text))  # Remove numbers
    return text

df['review'] = df['review'].apply(preprocess_text)

df = df[['rating', 'processed_review']]

df

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer()
x = tfidf_vectorizer.fit_transform(df['processed_review'])

y = df['rating']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

print(f"Train feature shape : {x_train.shape}")
print(f"Test feature shape : {x_test.shape}")

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
model = SVC()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy*100:.2f}%")

input = 'It works, but file writes are a bit slower tha...'
input = preprocess_text(input)
input = tfidf_vectorizer.transform([input])
prediction = model.predict(input)
if prediction == 1:
    print(1)
elif prediction == 2:
    print(2)
elif prediction == 3:
    print(3)
elif prediction == 4:
    print(4)
else:
    print(5)
print(prediction)

